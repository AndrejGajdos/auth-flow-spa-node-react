const Koa = require('koa');
const Router = require('koa-router');
const koaLogger = require('koa-logger');
const cors = require('@koa/cors');
const bodyParser = require('koa-bodyparser');
const serve = require('koa-static');
const send = require('koa-send');
const path = require('path');
const session = require('koa-session');
const redisStore = require('koa-redis');
const ratelimit = require('koa-simple-ratelimit');
const redis = require('redis');
const config = require('./serverConfig');
const includes = require('lodash/includes');

const app = new Koa();
// trust proxy
app.proxy = true;

// sessions
app.keys = [config.sK];

// create database with one user
const db = redis.createClient(includes(process.env.NODE_ENV, 'prod') ? config.redisConfig : {});
db.on('error', (err) => {
  console.log(`Redis Error ${err}`);
});
db.set('usersMockDatabase', JSON.stringify([
  {
    id: 1,
    email: 'chouomam@chouman.com',
    // "test" -- generated by bcrypt calculator
    password: '$2a$04$4yQfCo8kMpH24T2iQkw9p.hPjcz10m.FcWmgkOhkXNPSpbwHZ877S',
    userName: 'Chouomam',
  },
]), redis.print);
module.exports = {
  db,
};

app.use(
  session(
    {
      store: redisStore(includes(process.env.NODE_ENV, 'prod') ? config.redisConfig : {}),
    },
    app,
  ),
);
app.use(koaLogger());

app.use(async (ctx, next) => {
  try {
    await next();
  } catch (error) {
    ctx.status = error.status || 500;
    ctx.type = 'json';
    ctx.body = {
      message: error.message,
      type: error.type,
    };
    ctx.app.emit('error', error, ctx);
  }
});

app.use(ratelimit({
  db,
  duration: 60000,
  max: 100,
}));

const corsOptions = {
  credentials: true,
};
app.use(cors(corsOptions));
app.use(bodyParser());

const passport = require('koa-passport');

app.use(passport.initialize());
app.use(passport.session());

const auth = require('./controllers/auth');

app.use(serve(path.join(process.env.PWD, '/dist')));

const router = new Router();
router
  .post('/login', ctx => passport.authenticate('local', (err, user) => {
    if (!user) {
      ctx.throw(401, err);
    } else {
      ctx.body = user;
      return ctx.login(user);
    }
  })(ctx))
  .get('/users/profile', auth.getLoggedUser)
  .get('/logout', (ctx) => {
    ctx.logout();
    ctx.body = {};
  })
  .get('/auth/facebook', passport.authenticate('facebook'))
  .get(
    '/auth/facebook/callback',
    passport.authenticate('facebook', {
      successRedirect: '/facebook/success/',
      failureRedirect: '/',
    }),
  );

app.use(router.routes()).use(router.allowedMethods());

// this last koa middleware catches any request that isn't handled by
// koa-static or koa-router, ie your index.html in your example
app.use(function* index() {
  yield send(this, '/dist/index.html');
});

// don't listen to this port if the app is required from a test script
if (!module.parent) {
  app.listen(process.env.PORT || 1337);
  console.log('app listen on port: 1337');
}
